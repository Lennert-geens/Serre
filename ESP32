#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>//LCD, SI7021
#include <OneWire.h>//DS18B20
#include <DallasTemperature.h>//DS18B20
#include <LiquidCrystal_I2C.h>//LCD
#include <MFRC522.h>//RFID
#include <SPI.h>//RFID
#include <ESP32Servo.h>//servo library

#include <TaskScheduler.h>


const char* ssid = "jouw internet SSID";
const char* password = "jouw internet wachtwoordr";
const char* mqttServer = "het ip adres van u raspbary pi";
const int mqttPort = 1883;
const char* mqttUser = "your youser name";
const char* mqttPassword = "your pasword";
const char* clientID = "client_livingroom"; // MQTT client ID



#define SS_PIN 15 //rfid
#define RST_PIN 5 //rfid
#define si7021Addr 0x40 //si7021
#define SENSOR_PIN  13 // ESP32 pin GIOP13 connected to DS18B20 sensor's DQ pin
#define soilPin 35//grond vochtigheid van Yl-69

//relais
#define warmtemat 12
#define pomp 14
#define lamp 27
#define verwarming 32

#define servoPin 26 //servo motor

WiFiClient espClient;//MQTT
PubSubClient client(espClient);//MQTT
OneWire oneWire(SENSOR_PIN);//DS18B20
DallasTemperature DS18B20(&oneWire);//DS18B20 adress
LiquidCrystal_I2C lcd(0x27, 16, 2);//LCD adres
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
Servo myservo;//servo
Scheduler runner;





//status
int bieslook = 0;
int tuinkers = 0;
int verwarmingmat = 0;
int verwarmingel = 0;
int pumpbreak = 0;
int servostand = 0;
int lichtAan = 0;
int lichtbreak = 0;
int DATAbreak = 0;
int DATA = 0;


//sensor data
float grondtemp; // temperature in Celsius DS18B20
float omgevingtemp; //omgevings temperatur van de SI7021
float humidity; //omgeving humidity van SI7021
float grondvocht;// grond vochtigheid van Yl-69


void lichtAanUit() ; // Prototype so PlatformIO doesn't complain
void sendData();
void printData();
Task tasklichtAanUit( TASK_SECOND * 180 , TASK_FOREVER, &lichtAanUit ); //21 600
Task tasksendData(TASK_SECOND * 120 , TASK_FOREVER, &sendData );
Task taskprintData(TASK_SECOND * 15 , TASK_FOREVER, &printData );
void lichtAanUit() {
  if (lichtAan == 0 && (millis() - lichtbreak) > 10000)
  {
    Serial.println("");
    Serial.println("lampje zal aan gaan");
    lichtAan = 1;
    lichtbreak = millis();
  }
  if (lichtAan == 1 && (millis() - lichtbreak) > 10000)
  {
    Serial.println("");
    Serial.println("lapmje zal uit gaan");
    lichtAan = 0;
    lichtbreak = millis();
  }
}
void sendData() {
  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
    if (client.connect("ESP32Client", mqttUser, mqttPassword ))
    {
      Serial.println("connected");
    } else
    {
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
    }
  }
  String GRONDTEMP = String(grondtemp);
  String OMGEVINGTEMP = String(omgevingtemp);
  String HUMIDETY = String(humidity);
  String GRONDVOCHT = String(grondvocht);
  String soortplant1 = String(bieslook);
  String soortplant2 = String(tuinkers);

  client.publish("serre/temp/grondtemp",  GRONDTEMP.c_str());
  client.publish("serre/temp/OMGEViNG",  OMGEVINGTEMP.c_str());
  client.publish("serre/vocticheid/HUMI",  HUMIDETY.c_str());
  client.publish("serre/vochtigheid/GRONDvocht",  GRONDVOCHT.c_str());
  client.publish("serre/soort/bieslook",  soortplant1.c_str());
  client.publish("serre/soort/tuinkers",  soortplant2.c_str());
  Serial.print ('mqtt');





  client.disconnect();  // disconnect from the MQTT broker


}

void printData(){
  String GRONDTEMP = String(grondtemp);
  String OMGEVINGTEMP = String(omgevingtemp);
  String HUMIDETY = String(humidity);
  String GRONDVOCHT = String(grondvocht);
  if(DATA == 0 && (millis() - DATAbreak) > 10000)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    lcd.print("grtemp:" + String(GRONDTEMP));
    Serial.println("lcd");
    lcd.setCursor(0,0);
    if(bieslook == 1)
    {
      lcd.print("bieslook"); 
    }
    if(tuinkers == 1)
    {
      lcd.print("tuinkers");
    }
    DATAbreak = millis();
    DATA = 1;
  }
    if(DATA == 1 && (millis() - DATAbreak) > 10000)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    lcd.print("omgtemp:" + String(OMGEVINGTEMP));
    Serial.println("lcd");
    lcd.setCursor(0,0);
    if(bieslook == 1)
    {
      lcd.print("bieslook");//kies de plant dat er in moet steen
    }
    if(tuinkers == 1)
    {
      lcd.print("tuinkers");//kies welke plant het moet zijn.
    }
    DATAbreak = millis();
    DATA = 2;
  }
  if(DATA == 2 && (millis() - DATAbreak) > 10000)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    lcd.print("humidety:" + String(HUMIDETY));
    Serial.println("lcd");
    lcd.setCursor(0,0);
    if(bieslook == 1)
    {
      lcd.print("bieslook"); 
    }
    if(tuinkers == 1)
    {
      lcd.print("tuinkers");
    }
    DATAbreak = millis();
    DATA = 3;
  }
    if(DATA == 3 && (millis() - DATAbreak) > 10000)
  {
    lcd.clear();
    lcd.setCursor(0,1);
    lcd.print("moisture:" + String(GRONDVOCHT));
    Serial.println("lcd");
    lcd.setCursor(0,0);
    if(bieslook == 1)
    {
      lcd.print("bieslook"); 
    }
    if(tuinkers == 1)
    {
      lcd.print("tuinkers");
    }
    DATAbreak = millis();
    DATA = 0;
  }
}


void setup() {
  // put your setup code here, to run once:
  Wire.begin();
  WiFi.begin(ssid, password);//MGTT
  Serial.begin(115200);
  Wire.beginTransmission(si7021Addr);//si7021
  Wire.endTransmission();//si7021
  DS18B20.begin();    // initialize the DS18B20 sensor
  lcd.begin();//LCD
  lcd.backlight();//LCD
  runner.init();

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");
  client.setServer(mqttServer, mqttPort);


  SPI.begin();      // Initiate  SPI bus RFID
  mfrc522.PCD_Init();   // Initiate MFRC522


  pinMode(soilPin, INPUT);
  pinMode(warmtemat, OUTPUT);
  pinMode(pomp, OUTPUT);
  pinMode(lamp, OUTPUT);
  pinMode(verwarming, OUTPUT);

  ESP32PWM::allocateTimer(0);//servo
  ESP32PWM::allocateTimer(1);//servo
  ESP32PWM::allocateTimer(2);//servo
  ESP32PWM::allocateTimer(3);//servo
  myservo.setPeriodHertz(50);    // standard 50 hz servo
  myservo.attach(servoPin, 1000, 2000);//servo


  delay(300);

  runner.addTask( tasklichtAanUit );
  tasklichtAanUit.enable();
  runner.addTask( tasksendData );
  tasksendData.enable();
  runner.addTask( taskprintData );
  taskprintData.enable();
}

void loop() {
  // put your main code here, to run repeatedly:
  //#######################################################
  runner.execute();
  //SI7021();
  //DS_18B20();
  //moisture();
  rfidRead();
  //#######################################################
  while (bieslook == 1) {
    runner.execute();
    SI7021();
    DS_18B20();
    moisture();
    rfidRead();

    //################################################################grond temp
    if (grondtemp >= 23 && verwarmingmat == 0) //pas de het cijfer naar een de max temp dat het mag zijn
    {
      verwarmingmat = 1;
      digitalWrite(warmtemat, LOW);
      Serial.println("stop verwarmen grond");
      Serial.print("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
    }

    if (grondtemp <= 22 && verwarmingmat == 1) //pas de temp aan naar wat de plant ongeveer moet zijn.
    {
      verwarmingmat = 0;
      digitalWrite(warmtemat, HIGH);
      Serial.println("verwarmen grond");
      Serial.print("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
    }
    //################################################################omgeving temp
    if (omgevingtemp >= 23 && verwarmingel == 0) //pas aan naar een de temp dat het moet zijn
    {
      verwarmingel = 1;
      digitalWrite(verwarming, LOW);
      Serial.println("stop verwarmen omgeving");
      Serial.print("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
    }

    if (omgevingtemp <= 22 && verwarmingel == 1) //pas aan naar een temp waar het boven moet blijven
    {
      verwarmingel = 0;
      digitalWrite(verwarming, HIGH);
      Serial.println("verwarmen omgeving");
      Serial.print("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
    }
    //################################################################raam bediening
    if (omgevingtemp >= 23.5 && servostand == 0)//pas aan naar een temp waar het niet boven mag
    {

      myservo.write(180);
      Serial.println("");
      Serial.println("raampje open");
      Serial.println("");
      servostand = 1;
    }

    if (omgevingtemp <= 23.5 && servostand == 1)//pas aan naar de temp can hierboven
    {
      myservo.write(0);
      Serial.println("");
      Serial.println("raampje toe");
      Serial.println("");
      servostand = 0;
    }

    //################################################################grond vocht
    if (grondvocht < 25 && (millis() - pumpbreak) > 100000)//pas aan naar hoe vochtig de grond moet zijn
    {

      digitalWrite(pomp, HIGH);
      delay(1000);
      digitalWrite(pomp, LOW);
      pumpbreak = millis();
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("pompen");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");

    }

  }

  //################################################################tuinkers
  while (tuinkers == 1) {
    runner.execute();
    SI7021();
    DS_18B20();
    moisture();
    rfidRead();

    //################################################################grond temp
    if (grondtemp >= 20 && verwarmingmat == 0) //
    {
      verwarmingmat = 1;
      digitalWrite(warmtemat, LOW);
      Serial.println("stop verwarmen grond");
      Serial.print("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
    }

    if (grondtemp <= 19 && verwarmingmat == 1) //
    {
      verwarmingmat = 0;
      digitalWrite(warmtemat, HIGH);
      Serial.println("verwarmen grond");
      Serial.print("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
    }


    //################################################################omgeving temp
    if (omgevingtemp >= 21 && verwarmingel == 0) //
    {
      verwarmingel = 1;
      digitalWrite(verwarming, LOW);
      Serial.println("stop verwarmen grond");
      Serial.print("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
    }
    if (omgevingtemp <= 20 && verwarmingel == 1) //
    {
      verwarmingel = 0;
      digitalWrite(verwarming, HIGH);
      Serial.println("verwarmen grond");
      Serial.print("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");
    }

    //################################################################raam bedining
    if (omgevingtemp >= 21.5 && servostand == 0)
    {

      myservo.write(180);
      Serial.println("");
      Serial.println("raampje open");
      Serial.println("");
      servostand = 1;
    }

    if (omgevingtemp <= 21.5 && servostand == 1)
    {
      myservo.write(0);
      Serial.println("");
      Serial.println("raampje toe");
      Serial.println("");
      servostand = 0;
    }



    //################################################################grond vocht
    if (grondvocht < 20 && (millis() - pumpbreak) > 100000)
    {
      digitalWrite(pomp, HIGH);
      delay(1000);
      digitalWrite(pomp, LOW);
      pumpbreak = millis();
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("pompen");
      Serial.println("");
      Serial.println("");
      Serial.println("");
      Serial.println("");

    }

  }
}

void SI7021() {
  //SI7021
  unsigned int data[2];

  Wire.beginTransmission(si7021Addr);
  //Send humidity measurement command
  Wire.write(0xF5);
  Wire.endTransmission();
  delay(500);

  // Request 2 bytes of data

  Wire.requestFrom(si7021Addr, 2);
  // Read 2 bytes of data to get humidity
  if (Wire.available() == 2)
  {
    data[0] = Wire.read();
    data[1] = Wire.read();
  }

  // Convert the data
  float humidity1  = ((data[0] * 256.0) + data[1]);
  humidity1 = ((125 * humidity1) / 65536.0) - 6;

  Wire.beginTransmission(si7021Addr);
  // Send temperature measurement command
  Wire.write(0xF3);
  Wire.endTransmission();
  delay(500);

  // Request 2 bytes of data
  Wire.requestFrom(si7021Addr, 2);

  // Read 2 bytes of data for temperature
  if (Wire.available() == 2)
  {
    data[0] = Wire.read();
    data[1] = Wire.read();
  }

  // Convert the data
  float temp  = ((data[0] * 256.0) + data[1]);
  float celsTemp = ((175.72 * temp) / 65536.0) - 46.85;


  // Output data to serial monitor

  Serial.print("Humidity : ");
  Serial.print(humidity1);
  Serial.println(" % RH");
  Serial.print("Celsius : ");
  Serial.print(celsTemp);
  Serial.println(" C");
  humidity = humidity1;
  omgevingtemp = celsTemp;
  delay(1000);

}

void DS_18B20() {
  DS18B20.requestTemperatures();       // send the command to get temperatures
  grondtemp = DS18B20.getTempCByIndex(0);  // read temperature in °C


  Serial.print("grondTemperature: ");
  Serial.print(grondtemp);    // print the temperature in °C
  Serial.println("°C");

  delay(500);
}
void moisture() {
  int soilVal = analogRead(soilPin);
  soilVal = map(soilVal, 1255, 4095, 100, 0);
  Serial.print("Soil Moisture Sensor value is: ");
  Serial.print(soilVal);
  grondvocht = soilVal;
}

void rfidRead() {
  // Look for new cards
  Serial.println("rfid");
  if ( ! mfrc522.PICC_IsNewCardPresent())
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial())
  {
    return;
  }

  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content = "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++)
  {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.print("Message : ");
  content.toUpperCase();
  //hier word er gekeken of het de juiste RFID card is
  if (content.substring(1) == "93 A9 17 13" && bieslook == 0) //change here the UID of the card/cards that you want to give access
  {
    Serial.println("bieslook");
    lcd.print("bieslook");
    digitalWrite(verwarming, HIGH);
    digitalWrite(warmtemat, HIGH);
    bieslook = 1;
    tuinkers = 0;
    servostand = 0;
    verwarmingmat = 0;
    verwarmingel = 0;
    Serial.println();
    delay(1000);
  }
  //als dit niet is dan zal dit worden door gegeven
  if (content.substring(1) == "F3 8E BA 0D" && tuinkers == 0) {
    Serial.println("tuinkers");
    lcd.print("tuinkers");
    digitalWrite(verwarming, HIGH);
    digitalWrite(warmtemat, HIGH);
    tuinkers = 1;
    bieslook = 0;
    servostand = 0;
    verwarmingmat = 0;
    verwarmingel = 0;
    delay(1000);
  }
}
